# --------------------------------------------------------------------------------------------
#   ____      _ _           _   _              _                         
#  / ___|___ | | | ___  ___| |_(_)_   _____   / \   ___ ___ ___  ___ ___ 
# | |   / _ \| | |/ _ \/ __| __| \ \ / / _ \ / _ \ / __/ __/ _ \/ __/ __|
# | |__| (_) | | |  __/ (__| |_| |\ V /  __// ___ \ (_| (_|  __/\__ \__ \
#  \____\___/|_|_|\___|\___|\__|_| \_/ \___/_/   \_\___\___\___||___/___/
#
#				Providence: Cataloguing system for CollectiveAccess
#               Open-source collections management software
#               Version 1.7.9
#				
# -------------------------------------------------------------------------------------------
# 
# This file defines the basic settings required for the CollectiveAccess Providence 
# cataloguing module. This is the first file you should modify when configuring the application.
#
# Need help? Visit https://www.collectiveaccess.org/support/
#
# --------------------------------------------------------------------------------------------
# THE VALUES BELOW MUST BE CHANGED TO SUIT YOUR ENVIRONMENT
# --------------------------------------------------------------------------------------------

production:
  #
  # The following settings allow CollectiveAccess to connect to its database. These settings 
  # should have been provided to you by your system administrator or hosting provider.
  #
  # __CA_DB_HOST__ = Database server host name (often 'localhost')
  #
  __CA_DB_HOST__: localhost

  # __CA_DB_USER__ = Database login user name
  #
  __CA_DB_USER__: my_database_user

  # __CA_DB_PASSWORD__ = Database login password
  #
  __CA_DB_PASSWORD__: my_database_password

  # __CA_DB_DATABASE__ = The name of your CollectiveAccess database
  #
  __CA_DB_DATABASE__: name_of_my_database

  # __CA_APP_DISPLAY_NAME__ = the name of your system, for display purposes
  #
  # This value will be used on emails, on the login screen, in window titles, etc.
  #
  __CA_APP_DISPLAY_NAME__: My First CollectiveAccess System


  # __CA_ADMIN_EMAIL__ = the email address from which to send administrative messages
  #
  __CA_ADMIN_EMAIL__: info@put-your-domain-here.com


  # Outgoing email
  #
  # For CollectiveAccess to be able to send email notifications __CA_SMTP_SERVER__ and 
  # __CA_SMTP_PORT__ must be set. If your outgoing (SMTP) mail server requires you to 
  # authenticate, configure your login and connection details in  __CA_SMTP_AUTH__, 
  # __CA_SMTP_USER__, __CA_SMTP_PASSWORD__ and __CA_SMTP_SSL__
  #
  # __CA_SMTP_AUTH__ = authentication method for outgoing mail connection (set to PLAIN, LOGIN or CRAM-MD5; leave blank if no authentication is used.)
  # __CA_SMTP_SSL__ = SSL method to use for outgoing mail connection (set to SSL or TLS; leave blank if not authentication is used.)

  # __CA_SMTP_SERVER__ = Hostname of outgoing mail server
  #
  __CA_SMTP_SERVER__: localhost
  __CA_SMTP_PORT__: 25

  # If your outgoing (SMTP) mail server requires you to authenticate then authentiucation
  # details must be set in  __CA_SMTP_AUTH__, __CA_SMTP_USER__, __CA_SMTP_PASSWORD__
  # and __CA_SMTP_SSL__
  #

  # __CA_SMTP_AUTH__ = authentication method for outgoing mail connection
  #
  # Leave blank if authenication is not required. Supported authentication methods are
  # PLAIN, LOGIN and CRAM-MD5. LOGIN is most typically used.
  #
  __CA_SMTP_AUTH__:

  # __CA_SMTP_USER__ = User name for outgoing mail authentication
  #
  __CA_SMTP_USER__:

  # __CA_SMTP_PASSWORD__ = Password for outgoing mail authentication
  #
  __CA_SMTP_PASSWORD__:

  # __CA_SMTP_SSL__ = SSL method to use for outgoing mail connection
  #
  # Use either SSL or TLS. Leave blank if SMTP encryption is not used.
  #
  __CA_SMTP_SSL__:

  # --------------------------------------------------------------------------------------------
  # The following are extra options that often required changing. If you're not sure
  # what they should be set to you can safely leave them set to their defaults.
  # --------------------------------------------------------------------------------------------

  # __CA_QUEUE_ENABLED__ = enable background processing using the task queue
  #
  # The task queue allows users to push potentially long running processes, such as 
  # processing of large video and image files into the background and continue working.
  # 
  # Set this to a non-zero value if you want to use the task queue. Be sure to configure the task 
  # queue processing script to run (usually via CRON) if you set this option. Set up details are 
  # available at http://docs.collectiveaccess.org
  #
  __CA_QUEUE_ENABLED__: 0


  # __CA_DEFAULT_LOCALE__ = The locale to use when no user-preferred locale has been set
  #
  # The locale set here is used in situations where no locale is specifically set by the user: 
  # prior to login or prior to setting your preferred locale in user preferences for the first time.
  #
  # You should set this to the locale in which your users generally work.
  #
  # Note that whatever locale you set here *MUST* be present in your system locale list.
  # The default value is US/English, which exists in most configurations.
  # 
  __CA_DEFAULT_LOCALE__: en_US


  # __CA_USE_CLEAN_URLS__ = Determines if clean urls should be generated
  #
  # If the Apache mod_rewrite module is available on your server you may set this 
  # to have Providence use "clean" urls â€“ urls with the index.php handler omitted.
  #
  # Only set this if your web server includes mod_rewrite and it is enabled using
  # the provided .htaccess file
  # 
  __CA_USE_CLEAN_URLS__: 0


  # __CA_APP_NAME__ = a short name alphanumeric-only (no spaces or punctuation) identifier for this CollectiveAccess installation
  #
  # If you are running more than one instance of CollectiveAccess on the same server make 
  # sure each instance has its own unique __CA_APP_NAME__ setting.  __CA_APP_NAME__ must 
  # include letters, numbers and underscores only - no spaces or punctuation!
  #
  # If you don't know what to set this to then leave it as is. 
  #
  __CA_APP_NAME__: collectiveaccess


  # __CA_GOOGLE_MAPS_KEY__ = A Google Maps key to use for mapping and geocoding featured (optional)
  #
  __CA_GOOGLE_MAPS_KEY__:


  # *** 
  # __   __          _                _                  
  # \ \ / /__  _   _( )_ __ ___    __| | ___  _ __   ___ 
  #  \ V / _ \| | | |/| '__/ _ \  / _` |/ _ \| '_ \ / _ \
  #   | | (_) | |_| | | | |  __/ | (_| | (_) | | | |  __/
  #   |_|\___/ \__,_| |_|  \___|  \__,_|\___/|_| |_|\___|
  #                                                     
  # That's it! The settings here should be enough to get you up and running...
  # If they're not you can find help at http://support.collectiveaccess.org
  #
  # ***

  # --------------------------------------------------------------------------------------------
  # A few more settings that might need changing are below. Additional settings that are 
  # unlikely to require modification are in app/helpers/post-setup.php
  # --------------------------------------------------------------------------------------------

  # --------------------------------------------------------------------------------------------
  # Caching configuration
  # The default file-based caching should work acceptably in many setups.
  # Alternate schema may be used, including redis, sqlite, memcached or php APC. All require
  # additional software be present on your server, and in general all will provide 
  # better performance than file-based caching.

  # __CA_CACHE_BACKEND__ = caching method to use
  #
  # Options are: 'file', 'memcached', 'redis', 'apc' and 'sqlite'
  # memcached, redis and apc require PHP extensions that are not
  # part of the standard CollectiveAccess configuration check. If you do
  # configure them here and your PHP installation doesn't have the required extension you
  # may see critical errors. sqlite requires the PHP PDO extension and a working install
  # of sqlite. This is not guaranteed to be present on your server, but often is.
  __CA_CACHE_BACKEND__: file

  # Options for the caching back-ends you may wish to set include:
  # __CA_CACHE_FILEPATH__ = Path to on on disk location for storage of cached data 
  # __CA_CACHE_TTL__ = Cached data time-to-live (in seconds)
  # __CA_MEMCACHED_HOST__ = Hostname of memcached server
  # __CA_MEMCACHED_PORT__ = Port of memcached server
  # __CA_REDIS_HOST__ = Hostname of redis server
  # __CA_REDIS_PORT__ = Port of redis server
  # __CA_REDIS_DB__ = redis database index (typically a number between 0 and 15) 

  # File path for file-based caching. The default works but in some setups you may want to move this
  # to the fastest available storage (in terms of random access time), like an SSD
  __CA_CACHE_FILEPATH__: __CA_APP_DIR__/tmp

  # Time-to-live for cache items (in seconds)
  __CA_CACHE_TTL__: 3600

  # Host and port for memcached
  __CA_MEMCACHED_HOST__: localhost
  __CA_MEMCACHED_PORT__: 11211

  # Host and port for redis
  __CA_REDIS_HOST__: localhost
  __CA_REDIS_PORT__: 6379

  # Redis database index. This is useful if you want to use your Redis instance for several
  # applications. Redis is usually set up with 16 databases, indexed 0 through 15.
  # CollectiveAccess will use the first (index 0) unless told otherwise.
  __CA_REDIS_DB__: 0

  # --------------------------------------------------------------------------------------------

  # __CA_ALLOW_INSTALLER_TO_OVERWRITE_EXISTING_INSTALLS__
  #
  # Set this to allow the installer to overwrite an existing installation.
  # Only set this if you're debugging code or an installation profile.
  # Leaving it set is a major security hole - it will allow *ANYONE* with access to the  
  # installer to overwrite your database!
  #
  # Note that in overwriting your database you will destroy *all* data in the database 
  # including any non-CollectiveAccess tables. Use this option at your own risk!
  __CA_ALLOW_INSTALLER_TO_OVERWRITE_EXISTING_INSTALLS__: false

  # __CA_STACKTRACE_ON_EXCEPTION__
  #
  # Set to display detailed error information on-screen whenever an application 
  # exception occurs. This can be helpful for developers in situations where detailed
  # exception messages are useful but full debugging output is not required. 
  # For production use you should set this to false. Note that exceptions are always
  # logged to the application log in app/log, regardless of what is set here.
  __CA_STACKTRACE_ON_EXCEPTION__: false

  #
  # __CA_BASE_DIR__ = the absolute server path to the directory containing your CollectiveAccess installation
  #
  #		The default value attempts to determine the path automatically. You should only change this if it's
  #		failing to derive the correct value.
  #
  # 		If you must to set this manually, enter the correct directory but omit trailing slashes!
  # 		For Windows hosts, use a notation similar to "C:/PATH/TO/COLLECTIVEACCESS"; do NOT use backslashes
  #
  #  __CA_BASE_DIR__: /var/www/html

  #
  # __CA_URL_ROOT__ = the root-relative URL path to your CollectiveAccess installation
  #
  #		The default value attempts to determine the relative URL path automatically. You should only change
  #		this if it's failing to derive the correct value.
  #
  #		If you must to set this manually leave the __CA_URL_ROOT_ *BLANK* if the CollectiveAccess directory is the
  #		web server root or in the root directory of a virtual host. If CollectiveAccess is in a subdirectory or
  #		an alias is used to point the web server to the correct path, set '__CA_URL_ROOT__' to
  #		the relative url path to the subdirectory; start the path with a slash ('/') but omit trailing slashes.
  #
  # 		Example: If CollectiveAccess will be accessed via http://www.mysite.org/apps/ca then __CA_URL_ROOT__ would be set to /apps/ca
  #
  #  __CA_URL_ROOT__:

  #
  # __CA_SITE_HOSTNAME__ = the hostname for your system
  #
  #		The default value attempts to determine the relative URL path automatically. You should only change
  #		this if it's failing to derive the correct value.
  #
  #		If you must set this manually, it must be the full host name. Do not include http:// or any other prefixes.
  #
  #  __CA_SITE_HOSTNAME__:

  #
  # __CA_SITE_PROTOCOL__ = the protocol your system should be accessed with
  #
  #		The default value is based on the URL being used to access the site.  To force a protocol, set it explicitly.
  #
  __CA_SITE_PROTOCOL__: https

  # Path to CollectiveAccess 'app' directory
  __CA_APP_DIR__: __CA_BASE_DIR__/app

  # Path to CollectiveAccess 'models' directory containing database table model classes
  __CA_MODELS_DIR__: __CA_APP_DIR__/models

  # Path to CollectiveAccess 'lib' directory containing software libraries CA needs to function
  __CA_LIB_DIR__: __CA_APP_DIR__/lib

  # Path to CollectiveAccess 'lib' directory containing software libraries CA needs to function
  __CA_CONF_DIR__: __CA_APP_DIR__/conf

  # Only MySQL databases are currently supported but there are three available
  # methods to interact with them:
  #		Use 'mysql' if you need to use the old PHP "mysql" drivers. This is the default for older versions and can be used if all else fails.
  #		Use 'mysqli' to use the PHP MySQLi drivers. This is the current default.
  #		Use 'pdo_mysql' to use the PHP MySQL PDO driver. This has not been fully tested yet but should generally work ok.
  #
  #  When in doubt, try MySQLi first and then fall back to mysql
  __CA_DB_TYPE__: mysqli

  # The path to the main instance configuration file defined as a constant
  __CA_APP_CONFIG__: $_CA_CONFIG_PATH

  # Path to CollectiveAccess 'themes' directory containing visual presentation elements
  __CA_THEMES_DIR__: __CA_BASE_DIR__/themes

  # Name of theme to use for this request
  __CA_THEME__: my_theme

  # Root-relative URL path to 'themes' directory
  __CA_THEMES_URL__: __CA_URL_ROOT__/themes

  # Directory and URL paths to current theme
  __CA_THEME_DIR__: __CA_THEMES_DIR__/__CA_THEME__
  __CA_THEME_URL__: __CA_THEMES_URL__/__CA_THEME__

  # Path to local config directory - configuration containing installation-specific configuration
  # Note that this is not the same as the __CA_CONF_DIR__, which contains general application configuration
  # Installation-specific configuration simply allows you to override selected application configuration as-needed without having to modify the stock config
  # Note also that unit tests should generally ignore local configuration and use the base configuration only
  __CA_LOCAL_CONFIG_DIRECTORY__: __CA_APP_DIR__/conf/local

  __CA_DEFAULT_THEME_CONFIG_DIRECTORY__: __CA_THEMES_DIR__/__CA_THEME__/conf


  # __CA_ALLOW_AUTOMATIC_UPDATE_OF_VENDOR_DIR__
  #
  # Set this to allow allow web-based loading of missing vendor libraries.
  # This can be a very convenient way to install your system but could present a possible 
  # security risk if your system is publicly accessible on the internet. The risk is that 
  # by exposing the update control on a public url on a publicly accessible site you are 
  # potentially allowing anyone to initiate the update. 
  __CA_ALLOW_AUTOMATIC_UPDATE_OF_VENDOR_DIR__: true

  # __CA_ALLOW_DRAG_AND_DROP_PROFILE_UPLOAD_IN_INSTALLER__
  #
  # Set this to enable drag-and-drop upload of profiles in the installer. This allows 
  # you to avoid having to FTP new profiles or changes to existing ones. Note that this can
  # be a security risk as it allows anyone to upload files to your server. You should leave 
  # it set to false unless you really need it.
  __CA_ALLOW_DRAG_AND_DROP_PROFILE_UPLOAD_IN_INSTALLER__: false

  # __CA_DISABLE_CONFIG_CACHING__
  #
  # Set this to force configuration settings to be loaded from the plain text
  # files in __CA_CONF_DIR__ on each page refresh. This will have a significant negative
  # impact on performance. However, there are certain scenarios where want to prevent
  # caching, e.g. for debugging. DO NOT touch this unless you know what you're doing!
  __CA_DISABLE_CONFIG_CACHING__: false

  # __CA_ENABLE_DEBUG_OUTPUT__
  #
  # Set this to have the application print debugging information in the debug
  # console. This is primarily intended for developers working on custom code. If this
  # is enabled, any variables passed to the the caDebug() function
  # (see app/helpers/utilityHelpers.php) will trigger a detailed output of the
  # variable content. Note that utilityHelpers.php has to be included to use the function,
  # but it usually is.
  __CA_ENABLE_DEBUG_OUTPUT__: false

  # __CA_ALLOW_AUTOMATIC_UPDATE_OF_DATABASE__
  #
  # Set this to allow allow web-based database schema updates required after a code updates.
  # This can be a very convenient way to update your database but could present a possible
  # security risk if your system is publicly accessible on the internet. The risk is that
  # by exposing the update control on a public url on a publicly accessible site you are
  # potentially allowing anyone to initiate the database update.
  __CA_ALLOW_AUTOMATIC_UPDATE_OF_DATABASE__: true

  __CA_APP_TYPE__: "PROVIDENCE"
