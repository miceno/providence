<?php
/** ---------------------------------------------------------------------
 * tests/lib/ConfigurationYamlTest.php
 * ----------------------------------------------------------------------
 * CollectiveAccess
 * Open-source collections management software
 * ----------------------------------------------------------------------
 *
 * Software by Whirl-i-Gig (http://www.whirl-i-gig.com)
 * Copyright 2009-2020 Whirl-i-Gig
 *
 * For more information visit http://www.CollectiveAccess.org
 *
 * This program is free software; you may redistribute it and/or modify it under
 * the terms of the provided license as published by Whirl-i-Gig
 *
 * CollectiveAccess is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTIES whatsoever, including any implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 *
 * This source code is free and modifiable under the terms of 
 * GNU General Public License. (http://www.gnu.org/copyleft/gpl.html). See
 * the "license.txt" file for details, or visit the CollectiveAccess web site at
 * http://www.CollectiveAccess.org
 * 
 * @package CollectiveAccess
 * @subpackage tests
 * @license http://www.gnu.org/copyleft/gpl.html GNU Public License version 3
 * 
 * ----------------------------------------------------------------------
 */
use PHPUnit\Framework\TestCase;

define("__CA_DISABLE_CONFIG_CACHING__", true);

require_once(__CA_LIB_DIR__.'/Configuration.php');

function arrays_are_similar($a, $b) {
	// if the indexes don't match, return immediately
	if (count(array_diff_assoc($a, $b))) {
		return false;
	}
	// we know that the indexes, but maybe not values, match.
	// compare the values between the two arrays
	foreach($a as $k => $v) {
		if ($v !== $b[$k]) {
			return false;
		}
	}
	// we have identical indexes, and no unequal values
	return true;
}

class ConfigurationYamlTest extends TestCase {

	/**
	 * @var array|bool
	 */
	private $yaml_config;
	/**
	 * @var array|bool
	 */
	private $legacy_config;

	protected function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
		$o_config = new Configuration();

		$o_config->clear();
		$this->yaml_config = $o_config->loadYaml(__CA_BASE_DIR__.'/tests/conf/app.yaml');

		$o_config->clear();
		$this->legacy_config = $o_config->loadFile(__CA_BASE_DIR__.'/tests/conf/legacy_app.conf');
	}

	public function testLoadYamlKeys(){
		$this->assertEqualsCanonicalizing(array_keys($this->legacy_config), array_keys($this->yaml_config));
	}

	public function testLoadLegacyAndYamlAreEqual() {
		$json_text = caFormatJson(json_encode($this->yaml_config));
		$this->assertSame(
				array_diff_assoc($this->legacy_config, $this->yaml_config),
				array_diff_assoc($this->yaml_config, $this->legacy_config));
	}

	public function testYamlTrue(){
		$this->assertTrue($this->yaml_config['ca_occurrences_no_new_submenu']);
	}
	public function testYamlNumberIsNotTrue(){
		$this->assertNotTrue($this->yaml_config['ca_sets_breakout_find_by_type_in_submenu']);
		$this->assertNotTrue($this->yaml_config['ca_movements_breakout_find_by_type_in_submenu']);
	}
	public function testYamlFalse(){
		$this->assertFalse($this->yaml_config['ca_object_lots_no_new_submenu']);
	}
}
?>
